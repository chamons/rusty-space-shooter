package example:game;

interface types {
  enum key {
    space,
    apostrophe,
    comma,
    minus,
    period,
    slash,
    key-zero,
    key-one,
    key-two,
    key-three,
    key-four,
    key-five,
    key-six,
    key-seven,
    key-eight,
    key-nine,
    semicolon,
    equal,
    a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    i,
    j,
    k,
    l,
    m,
    n,
    o,
    p,
    q,
    r,
    s,
    t,
    u,
    v,
    w,
    x,
    y,
    z,
    left-bracket,
    backslash,
    right-bracket,
    grave-accent,
    world-one,
    world-two,
    escape,
    enter,
    tab,
    backspace,
    insert,
    delete,
    right,
    left,
    down,
    up,
    page-up,
    page-down,
    home,
    end,
    caps-lock,
    scroll-lock,
    num-lock,
    print-screen,
    pause,
    f1,
    f2,
    f3,
    f4,
    f5,
    f6,
    f7,
    f8,
    f9,
    f10,
    f11,
    f12,
    f13,
    f14,
    f15,
    f16,
    f17,
    f18,
    f19,
    f20,
    f21,
    f22,
    f23,
    f24,
    f25,
    kp0,
    kp1,
    kp2,
    kp3,
    kp4,
    kp5,
    kp6,
    kp7,
    kp8,
    kp9,
    kp-decimal,
    kp-divide,
    kp-multiply,
    kp-subtract,
    kp-add,
    kp-enter,
    kp-equal,
    left-shift,
    left-control,
    left-alt,
    left-super,
    right-shift,
    right-control,
    right-alt,
    right-super,
    menu,
    unknown,
  }

  record click-info {
    pressed: bool,
    released: bool,
    down: bool
  }

  record mouse-info {
    position: position,
    left: click-info,
    right: click-info,
    middle: click-info
  }

  record keyboard-info {
    pressed: list<key>,
    released: list<key>,
    down: list<key>
  }

  record game-color {
    r: f32,
    g: f32,
    b: f32,
    a: f32
  }

  record position {
    x: f32,
    y: f32
  }

  record size {
    width: f32,
    height: f32
  }
}

interface host-api {
  use types.{game-color, position, size };

  resource game-screen {
    draw-text: func(text: string, position: position, size: f32, color: game-color);
    draw-image: func(filename: string, position: position, size: option<size>);
    draw-line: func(first: position, second: position, thickness: f32, color: game-color);
  }
}

interface game-api { 
  use types.{mouse-info, keyboard-info};
  use host-api.{game-screen};

  resource game-instance {
    constructor();

    run-frame: func(mouse: mouse-info, key: keyboard-info, screen: borrow<game-screen>);
    save: func() -> list<u8>;
    restore: func(data: list<u8>);
  }
}

world hotreload-example {
  import host-api;
  export game-api;
}